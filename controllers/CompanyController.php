<?php

namespace app\controllers;

use app\helpers\HelperFunction;
use app\models\Company;
use app\models\CompanyTeam;
use app\models\Contact;
use sizeg\jwt\JwtHttpBearerAuth;
use Yii;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use yii\filters\Cors;
use yii\helpers\Url;
use yii\web\UploadedFile;

class CompanyController extends \yii\web\Controller
{
    public $enableCsrfValidation = false;

    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['corsFilter'] = [
            'class' => Cors::class,
            'cors' => [
                'Origin' => Yii::$app->params['allowedDomains'],
                'Access-Control-Request-Method' => ['*'],
                'Access-Control-Allow-Methods' => ['POST', 'PUT', 'OPTIONS', 'GET'],
                'Access-Control-Allow-Headers' => ['*'],
                'Access-Control-Request-Headers' => ['*'],
                'Access-Control-Allow-Credentials' => true,
            ]
        ];
        $behaviors['authenticator'] = [
            'class' => CompositeAuth::class,
            'authMethods' => [
                HttpBearerAuth::class,
                QueryParamAuth::class,
                JwtHttpBearerAuth::class
            ]
        ];
        return $behaviors;
    }

    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'api-docs' => [
                'class' => 'genxoft\swagger\ViewAction',
                'apiJsonUrl' => \yii\helpers\Url::to(['/site/api-json'], true),
            ],
            'api-json' => [
                'class' => 'genxoft\swagger\JsonAction',
                'dirs' => [
                    Yii::getAlias('@app/controllers'),
                    Yii::getAlias('@app/models'),
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return parent::beforeAction($action);
    }

    public function actionIndex()
    {
        return ['status' => 'ok', 'status' => 'working'];
    }

    public function actionGet($id)
    {
        try {
            $company = Company::find()
                ->where(['id' => (int)$id])
                ->with("companyTeams", "contacts")
                ->asArray()
                ->one();
            if ($company === null)
                return ['status' => 'error', 'details' => "There is no company that has this id ($id)"];
            $company['img'] = Url::to('@app/web/company/images/' . $company['img'], true);
            $company['logo'] = Url::to('@app/web/company/images/' . $company['logo'], true);
            return ['status' => 'ok', 'company' => $company];
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionSaveCompanyInfo()
    {
        try {
            $errors = [
                'teamErrors' => [],
                'contactErrors' => [],
            ];
            $data = (array)(Yii::$app->request->post());

            if (isset($data['id'])) {
                $company = Company::findOne($data['id']);
            } else {
                $company = new  Company();
            }
            $company->load($data, '');

            HelperFunction::createFolderIfNotExist('@app/web/company/images');

            $image = UploadedFile::getInstanceByName('companyImage');
            $logo = UploadedFile::getInstanceByName('companyLogo');
            if ($image) {
                $name = Yii::$app->security->generateRandomString(5) . '.' . $image->extension;
                $image->saveAs(Url::to('@app/web/company/images') . '/' . $name);
                $company->img = $name;
            }

            if ($logo) {
                $name = Yii::$app->security->generateRandomString(5) . '.' . $logo->extension;
                $logo->saveAs(Url::to('@app/web/company/images') . '/' . $name);
                $company->logo = $name;
            }

            if ($company->validate() && $company->save()) {
                $companyTeams = isset($data['companyTeams']) === true ? $data['companyTeams'] : [];
                if (!empty($companyTeams)) {
                    foreach ($companyTeams as $member) {
                        $member = (array)$member;
                        if ($member['id'] === '') {
                            $teamMember = new CompanyTeam();
                        } else {
                            $teamMember = CompanyTeam::findOne(['id' => $member['id']]);
                        }
                        $teamMember->load($member, '');
                        if ($teamMember->validate()) {
                            $teamMember->save();
                        } else {
                            $errors['teamErrors'][] = $teamMember->getErrors();
                        }
                    }
                }
                $companyContacts = isset($data['companyContacts']) === true ? $data['companyContacts'] : [];
                if (!empty($companyContacts)) {
                    foreach ($companyContacts as $contact) {
                        $contact = (array)$contact;
                        if ($contact['id'] === '') {
                            $companyContact = new  Contact();
                        } else {
                            $companyContact = Contact::findOne(['id' => (int)$contact['id']]);
                        }
                        $companyContact->load($contact, '');
                        if ($companyContact->validate()) {
                            $companyContact->save();
                        } else {
                            $errors['contactErrors'][] = $companyContact->getErrors();
                        }
                    }
                }
                return ['status' => 'ok', 'errors' => $errors];
            } else {
                return ['status' => 'error', 'details' => $company->getErrors()];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionDeleteCompanyContact()
    {
        try {
            $id = Yii::$app->request->post('id');
            $companyContact = Contact::findOne(['id' => (int)$id]);
            if ($companyContact === null)
                return ['status' => 'error', 'details' => 'There is no contact that has this id'];

            if ($companyContact->delete()) {
                return ['status' => 'ok'];
            } else {
                return ['status' => 'error', 'details' => $companyContact->getErrors()];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionDeleteCompanyTeam()
    {
        try {
            $id = Yii::$app->request->post('id');
            $companyTeam = CompanyTeam::findOne(['id' => (int)$id]);
            if ($companyTeam === null)
                return ['status' => 'error', 'details' => 'There is no member team that has this id'];

            if ($companyTeam->delete()) {
                return ['status' => 'ok'];
            } else {
                return ['status' => 'error', 'details' => $companyTeam->getErrors()];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }
}
