<?php

namespace app\controllers;

use app\helpers\HelperFunction;
use app\models\User;
use sizeg\jwt\JwtHttpBearerAuth;
use Yii;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use yii\filters\Cors;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;
use yii\web\Controller;
use yii\web\Response;
use yii\web\UploadedFile;

class SiteController extends Controller
{
    public $enableCsrfValidation = false;

    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'api-docs' => [
                'class' => 'genxoft\swagger\ViewAction',
                'apiJsonUrl' => \yii\helpers\Url::to(['/site/api-json'], true),
            ],
            'api-json' => [
                'class' => 'genxoft\swagger\JsonAction',
                'dirs' => [
                    Yii::getAlias('@app/controllers'),
                    Yii::getAlias('@app/models'),
                ],
            ],
        ];
    }

    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['corsFilter'] = [
            'class' => Cors::class,
            'cors' => [
                'Origin' => Yii::$app->params['allowedDomains'],
                'Access-Control-Request-Method' => ['*'],
                'Access-Control-Allow-Methods' => ['POST', 'PUT', 'OPTIONS', 'GET'],
                'Access-Control-Allow-Headers' => ['*'],
                'Access-Control-Request-Headers' => ['*'],
                'Access-Control-Allow-Credentials' => true,
            ]
        ];
        $behaviors['authenticator'] = [
            'class' => CompositeAuth::class,
            'except' => ['login', 'signup', 'index'],
            'authMethods' => [
                HttpBearerAuth::class,
                QueryParamAuth::class,
                JwtHttpBearerAuth::class
            ]
        ];
        return $behaviors;
    }

    public function beforeAction($action)
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        return parent::beforeAction($action);
    }

    public function actionIndex()
    {
        return ['status' => 'ok', 'msg' => 'It\'s working'];
    }

    //modify this to login by default
    public function actionLogin()
    {
        $data = (array)json_decode(Yii::$app->request->getRawBody(), true);
        if(!isset($data['email']) || !isset($data['password'])){
            return ['status'=>'error','details'=>'There are missing params'];
        }
        $isValidRequest = HelperFunction::checkEmptyData([$data['email'], $data['password']]);
        if ($isValidRequest) return $isValidRequest;

        $user = User::find()->where(['email' => $data['email']])->with('contacts')->one();
        if ($user === null) return ['status' => 'error', 'details' => 'Email is not exist or wrong'];

        if (!Yii::$app->security->validatePassword($data['password'], $user->password))
            return ['status' => 'error', 'details' => 'Password is not exist'];

        $accessToken = Yii::$app->jwt->getBuilder()
            ->setIssuer('http://localhost')
            ->setAudience('http://localhost')
            ->setId((string)$user->id, true)
            ->setIssuedAt(time()) // Configures the time that the token was issue (iat claim)
            ->setNotBefore(time() + 60)
            ->setExpiration(time() + 99900999) // Configures the expiration time of the token (exp claim)
            ->set('uid', (string)$user->id) // Configures a new claim, called "uid"
            ->getToken(); // Retrieves the generated token
        $user->accessToken = (string)$accessToken;

        $user->save();
        $user = $user->toArray();
        $user['img'] = Url::to('@web/users/images/' . $user['img'], true);

        return [
            'status' => 'ok',
            'accessToken' => (string)$accessToken,
            'userInfo' => $user
        ];
    }

    public function actionSignup()
    {
        try {
            $data = (array)json_decode(Yii::$app->request->getRawBody());
            $email = ArrayHelper::getValue($data, 'email', '');
            $password = ArrayHelper::getValue($data, 'password', '');
            $isDataValid = HelperFunction::checkEmptyData([$email, $password]);
            if ($isDataValid) {
                return $isDataValid;
            }
            $newUser = new User();
            $newUser->email = trim($email);
            $newUser->password = Yii::$app->security->generatePasswordHash(trim($password));
            if ($newUser->validate()) {
                $newUser->save();
                return ['status' => 'ok'];
            } else {
                return ['status' => 'error', 'details' => $newUser->getErrors()];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionSaveUserInfo()
    {
        try {
            $data = (array)Yii::$app->request->post();
            $user = User::findOne(Yii::$app->user->identity->id);
            if ($user === null) return ["status" => "error", "details" => "There is no user that has this id"];

            $user->load($data, '');

            $userImage = UploadedFile::getInstanceByName('userImage');
            if ($userImage !== null) {
                HelperFunction::createFolderIfNotExist(Url::to('@app/web/users/images'));
                $name = Yii::$app->security->generateRandomString(5) . '.' . $userImage->extension;
                $userImage->saveAs(Url::to('@app/web/users/images') . '/' . $name);
                $user->img = $name;
            }
            if ($user->validate()) {
                $user->save();
                return ['status' => 'ok'];
            } else {
                return ['status' => 'error', 'details' => $user->getErrors()];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', $e->getMessage()];
        }

    }
    public function actionGetAllUsers()
    {
        $users = User::find()->where([])->asArray()->all();
        if ($users) {
            $users = array_map(function ($u){
                $u['img'] = Url::to('@app/web/users/'.$u['img'],true);
                return $u;
            },$users);
            return ['status' => 'ok', 'users' => $users];
        } else {
            return ['status' => 'error', 'details' => 'There is no user'];
        }
    }
}
