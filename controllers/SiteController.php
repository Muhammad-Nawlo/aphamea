<?php

namespace app\controllers;

use app\helpers\HelperFunction;
use app\models\Contact;
use app\models\User;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use sizeg\jwt\JwtHttpBearerAuth;
use Yii;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use yii\filters\Cors;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;
use yii\web\Controller;
use yii\web\Response;
use yii\web\UploadedFile;

class SiteController extends Controller
{
    public $enableCsrfValidation = false;

    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'api-docs' => [
                'class' => 'genxoft\swagger\ViewAction',
                'apiJsonUrl' => \yii\helpers\Url::to(['/site/api-json'], true),
            ],
            'api-json' => [
                'class' => 'genxoft\swagger\JsonAction',
                'dirs' => [
                    Yii::getAlias('@app/controllers'),
                    Yii::getAlias('@app/models'),
                ],
            ],
        ];
    }

    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['corsFilter'] = [
            'class' => Cors::class,
            'cors' => [
                'Origin' => Yii::$app->params['allowedDomains'],
                'Access-Control-Request-Method' => ['*'],
                'Access-Control-Allow-Methods' => ['POST', 'PUT', 'OPTIONS', 'GET'],
                'Access-Control-Allow-Headers' => ['*'],
                'Access-Control-Request-Headers' => ['*'],
                'Access-Control-Allow-Credentials' => true,
            ]
        ];
        // $behaviors['authenticator'] = [
        //     'class' => CompositeAuth::class,
        //     'except' => ['login', 'signup', 'index', 'save-user-info'],
        //     'authMethods' => [
        //         HttpBearerAuth::class,
        //         QueryParamAuth::class,
        //         JwtHttpBearerAuth::class
        //     ]
        // ];
        return $behaviors;
    }

    public function beforeAction($action)
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        return parent::beforeAction($action);
    }

    public function actionIndex()
    {
        return ['status' => 'ok', 'status' => 'It\'s working'];
    }

    public function actionLogin()
    {
        $data = (array)json_decode(Yii::$app->request->getRawBody(), true);
        if (!isset($data['email']) || !isset($data['password'])) {
            return ['status' => 'error', 'details' => 'There are missing params'];
        }
        $isValidRequest = HelperFunction::checkEmptyData([$data['email'], $data['password']]);
        if ($isValidRequest) return $isValidRequest;

        $user = User::find()
            ->where(['email' => $data['email']])
            ->with('contacts', 'region', 'city', 'country')
            ->asArray()
            ->one();

        if ($user === null) return ['status' => 'error', 'details' => 'Email is not exist or wrong'];

        if (!Yii::$app->security->validatePassword($data['password'], $user['password']))
            return ['status' => 'error', 'details' => 'Password is not exist'];

        $accessToken = Yii::$app->jwt->getBuilder()
            ->setIssuer('http://localhost')
            ->setAudience('http://localhost')
            ->setId((string)$user['id'], true)
            ->setIssuedAt(time()) // Configures the time that the token was issue (iat claim)
            ->setNotBefore(time() + 60)
            ->setExpiration(time() + 99900999) // Configures the expiration time of the token (exp claim)
            ->set('uid', (string)$user['id']) // Configures a new claim, called "uid"
            ->getToken(); // Retrieves the generated token
        User::updateAll(['accessToken' => (string)$accessToken], ['id' => $user['id']]);

        $user['accessToken'] = (string)$accessToken;
        if ($user['img'])
            $user['img'] = Url::to('@web/users/images/' . $user['img'], true);

        return [
            'status' => 'ok',
            'userInfo' => $user
        ];
    }

    public function actionSignup()
    {
        try {
            $data = (array)json_decode(Yii::$app->request->getRawBody());
            $email = ArrayHelper::getValue($data, 'email', '');
            $password = ArrayHelper::getValue($data, 'password', '');
            $firstName = ArrayHelper::getValue($data, 'firstName', '');
            $lastName = ArrayHelper::getValue($data, 'lastName', '');
            $isDataValid = HelperFunction::checkEmptyData([$email, $password, $firstName, $lastName]);
            if ($isDataValid) {
                return $isDataValid;
            }
            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                return ['status' => 'error', 'details' => 'Your email is not valid'];
            }
            if ((strlen($firstName) < 2 && strlen($firstName) > 20) ||
                (strlen($lastName) < 2 && strlen($lastName) > 20)
            ) {
                return ['status' => 'error', 'details' => 'First name and last name should be more than 2 and less than 20 charachter'];
            }
            if (strlen($password) < 8 || strlen($password) > 20) {
                return ['status' => 'error', 'details' => 'Your password should be between 8 and 20 charachter'];
            }

            $newUser = new User();
            $newUser->email = trim($email);
            $newUser->firstName = trim($firstName);
            $newUser->lastName = trim($lastName);
            $newUser->password = Yii::$app->security->generatePasswordHash(trim($password));

            if ($newUser->validate()) {
                $newUser->save();
                return ['status' => 'ok'];
            } else {
                return ['status' => 'error', 'details' => $newUser->getErrors()];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionSaveUserInfo()
    {
        $errors = [];
        try {
            $data = (array)Yii::$app->request->post();
            if (!isset($data['email']))
                return ["status" => "error", "details" => "There is missing param"];

            $user = User::findOne(['email' => $data['email']]);
            if ($user === null) return ["status" => "error", "details" => "There is no user that has this email"];

            $user->load($data, '');
            $userContacts = isset($data['userContacts']) ? (array)$data['userContacts'] : [];
            $userImage = UploadedFile::getInstanceByName('userImage');
            if ($userImage !== null) {
                HelperFunction::createFolderIfNotExist(Url::to('@app/web/users/images'));
                HelperFunction::deletePhotos($user->img, 'users/images');
                $name = Yii::$app->security->generateRandomString(5) . '.' . $userImage->extension;
                $userImage->saveAs(Url::to('@app/web/users/images') . '/' . $name);
                $user->img = $name;
            }

            if ($userContacts) {
                Contact::deleteAll(['userId' => $user->id]);
                foreach ($userContacts as $c) {
                    if (
                        (!isset($c['type']) && !in_array((int)$c['type'], Contact::CONTACT_TYPES)) ||
                        !isset($c['content'])
                    ) {
                        $errors[] = 'The content of contact is invalid';
                    }
                    $newContact = new Contact();
                    $newContact->userId = $user->id;
                    $newContact->type = (int)$c['type'];
                    $newContact->content = $c['content'];
                    if ($newContact->validate()) {
                        $newContact->save();
                    } else {
                        $errors[] = $newContact->getErrors();
                    }
                }
            }

            if ($user->validate()) {
                $user->save();
                return ['status' => 'ok', 'errors' => $errors];
            } else {
                return ['status' => 'error', 'details' => $user->getErrors()];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionGetAllUsers()
    {
        $users = User::find()->where([])
            ->with('contacts', 'region', 'city', 'country')
            ->asArray()->all();
        if ($users) {
            $users = array_map(function ($u) {
                if ($u['img'])
                    $u['img'] = Url::to('@web/users/images/' . $u['img'], true);
                return $u;
            }, $users);
            return ['status' => 'ok', 'users' => $users];
        } else {
            return ['status' => 'error', 'details' => 'There is no user'];
        }
    }

    public function actionExportToExcelFile()
    {
        $data = User::find()->where([])->all();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->setCellValue('A1', 'First Name');
        $sheet->setCellValue('B1', 'Last name');
        $sheet->setCellValue('C1', 'Email');
        $sheet->setCellValue('D1', 'Role');
        $i = 2;
        foreach ($data as $userInfo) {
            $sheet->setCellValue("A$i", $userInfo->firstName);
            $sheet->setCellValue("B$i", $userInfo->lastName);
            $sheet->setCellValue("C$i", $userInfo->email);
            $sheet->setCellValue("D$i", $userInfo->role);
            $i++;
        }

        $fileName = date('Y-m-d');
        $writer = new Xlsx($spreadsheet);
        HelperFunction::createFolderIfNotExist(Url::to('@app/web/excelFiles/users'));
        $writer->save("excelFiles/users/" . "$fileName.xlsx");
        $this->response->sendFile(Url::to("@app/web/excelFiles/users/$fileName.xlsx"), "$fileName.xlsx");
    }

    public function actionGenerateExcelFileTemplate()
    {
        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->setCellValue('A1', 'First Name');
        $sheet->setCellValue('B1', 'Last name');
        $sheet->setCellValue('C1', 'Email');
        $sheet->setCellValue('D1', 'Password');
        $sheet->setCellValue('E1', 'Role');

        $fileName = yii::$app->getSecurity()->generateRandomString(10);
        $writer = new Xlsx($spreadsheet);
        HelperFunction::createFolderIfNotExist(Url::to('@app/web/excelFiles/users'));


        $writer->save("excelFiles/users" . $fileName . ".xlsx");
        $this->response->sendFile(Url::to("@app/web/excelFiles/users" . $fileName . ".xlsx"), "$fileName.xlsx");
    }

    public function actionImportExcelFile()
    {
        if (isset($_FILES['sheet'])) {
            $file = $_FILES['sheet'];
            $tmpName = yii::$app->security->generateRandomString();
            $inputFile = 'excelFiles/users/' . $tmpName . '.xlsx';
            move_uploaded_file($file['tmp_name'], $inputFile);
            $spreadSheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFile);
            $usersArray = $spreadSheet->getActiveSheet()->toArray();
            //To remove the first row in file
            $tmpExcelFields = array_splice($usersArray, 0, 1);
            //This condition to check the template
            if (
                $tmpExcelFields[0][0] != 'First Name' ||
                $tmpExcelFields[0][1] != 'Last name' ||
                $tmpExcelFields[0][2] != 'Email' ||
                $tmpExcelFields[0][3] != 'Password' ||
                $tmpExcelFields[0][4] != 'Role'
            ) {
                return ['status' => 'error', 'details' => 'This excel file is not a validate file'];
            }
            $i = 0;
            $errorArr = [];
            foreach ($usersArray as $user) {
                $i++;
                if (filter_var($user[2], FILTER_VALIDATE_EMAIL)) {
                    $isExist = User::findOne(['email' => $user[4]]);
                    if ($isExist === null) {
                        $newUser = new User();
                        $newUser->firstName = htmlspecialchars(stripslashes(trim($user[0])));
                        $newUser->lastName = htmlspecialchars(stripslashes(trim($user[1])));
                        $newUser->email = filter_var($user[2], FILTER_VALIDATE_EMAIL);
                        if (strlen(trim($user[3]) < 8 || strlen(trim($user[3])) > 20)) {
                            array_push($errorArr, ['error' => "<b>$user[0]</b>, Password should be between 8 and 20 charachter"]);
                        }
                        $newUser->password = Yii::$app->security->generatePasswordHash($user[3]);

                        if (!in_array((int)$user[4], User::ROLE)) {
                            array_push($errorArr, ['error' => "<b>$user[2]</b> has invalid role"]);
                            continue;
                        }
                        $newUser->role = $user[4];
                        if ($newUser->validate()) {
                            $newUser->save();
                        } else {
                            array_push($errorArr, ['error' => "<b>$user[2]</b> ", 'details' => $newUser->getErrors()]);
                        }
                    } else {
                        array_push($errorArr, ['error' => "<b>$user[4]</b> User already exist"]);
                    }
                } else {
                    array_push($errorArr, ['error' => "<b>$user[4]</b> Please enter valid email address"]);
                }
            }
            return ['status' => 'ok', 'errorDetails' => $errorArr];
        } else {
            return ['status' => 'error', 'details' => 'There is no file uploaded'];
        }
    }
}
