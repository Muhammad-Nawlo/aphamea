<?php

namespace app\controllers;

use app\helpers\HelperFunction;
use app\models\Category;
use app\models\Medicine;
use app\models\MedicineCategory;
use app\models\MedicinePharmaceuticalForm;
use app\models\PharmaceuticalForm;
use PhpOffice\PhpSpreadsheet\IOFactory;
use sizeg\jwt\JwtHttpBearerAuth;
use Yii;
use yii\db\Expression;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use yii\filters\Cors;
use yii\helpers\Url;
use yii\web\UploadedFile;

class MedicineController extends \yii\web\Controller
{
    public $enableCsrfValidation = false;

    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['corsFilter'] = [
            'class' => Cors::class,
            'cors' => [
                'Origin' => Yii::$app->params['allowedDomains'],
                'Access-Control-Request-Method' => ['*'],
                'Access-Control-Allow-Methods' => ['POST', 'PUT', 'OPTIONS', 'GET'],
                'Access-Control-Allow-Headers' => ['*'],
                'Access-Control-Request-Headers' => ['*'],
                'Access-Control-Allow-Credentials' => true,
            ]
        ];
        $behaviors['authenticator'] = [
            'class' => CompositeAuth::class,
            'authMethods' => [
                HttpBearerAuth::class,
                QueryParamAuth::class,
                JwtHttpBearerAuth::class
            ]
        ];
        return $behaviors;
    }

    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'api-docs' => [
                'class' => 'genxoft\swagger\ViewAction',
                'apiJsonUrl' => \yii\helpers\Url::to(['/site/api-json'], true),
            ],
            'api-json' => [
                'class' => 'genxoft\swagger\JsonAction',
                'dirs' => [
                    Yii::getAlias('@app/controllers'),
                    Yii::getAlias('@app/models'),
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return parent::beforeAction($action);
    }

    public function actionIndex()
    {
        return ['msg' => 'ok', 'status' => 'working'];
    }

    public function actionReadMedicines()
    {
        $spreadSheet = IOFactory::load(Url::to('@app/web/aphamea.xlsx'));
        $spreadSheetArray = $spreadSheet->getActiveSheet()->toArray();
        array_splice($spreadSheetArray, 0, 1);
        foreach ($spreadSheetArray as $m) {
            $newMedicine = new Medicine();
            $newMedicine->productName = $m[1];
            $newMedicine->indications = $m[5];
            $newMedicine->packing = $m[6];
            $newMedicine->composition = $m[4];
            if ($newMedicine->validate()) {
                $newMedicine->save();

                $pharmaceuticalForm = PharmaceuticalForm::findOne(['name' => $m[2]]);
                if ($pharmaceuticalForm === null) continue;

                $pm = new MedicinePharmaceuticalForm();
                $pm->medicineId = $newMedicine->id;
                $pm->pharmaceuticalFormId = $pharmaceuticalForm->id;
                $pm->save();


                $category = Category::findOne(['name' => $m[3]]);
                if ($category === null) continue;
                $cm = new MedicineCategory();
                $cm->medicineId = $newMedicine->id;
                $cm->categoryId = $pharmaceuticalForm->id;
                $cm->save();
            }
        }
    }

    public function actionAdd()
    {
        $data = (array)(Yii::$app->request->post());
        $newMedicine = new Medicine();
        $newMedicine->load($data, '');
        $medicineImages = UploadedFile::getInstancesByName('medicineImages');
        if (!empty($medicineImages)) {
            HelperFunction::createFolderIfNotExist('@app/web/medicines/images');
            $imagesName = [];
            foreach ($medicineImages as $img) {
                $name = Yii::$app->security->generateRandomString(5) . '.' . $img->extension;
                $img->saveAs(Url::to('@app/web/medicines/images') . '/' . $name);
                $imagesName[] = $name;
            }
            $newMedicine->imgs = implode(',', $imagesName);
        }
        if ($newMedicine->validate()) {
            $newMedicine->save();

            $pharmaceuticalForm = PharmaceuticalForm::findOne(['id' => (int)$data['pharmaceuticalFormId']]);
            if ($pharmaceuticalForm !== null) {
                $pm = new MedicinePharmaceuticalForm();
                $pm->medicineId = $newMedicine->id;
                $pm->pharmaceuticalFormId = $pharmaceuticalForm->id;
                $pm->save();
            } else {
                return ['status' => 'error', 'details' => 'There is no pharmaceutical form that has this id'];
            }

            $category = Category::findOne(['id' => $data['categoryId']]);
            if ($category !== null) {
                $c = new MedicineCategory();
                $c->medicineId = $newMedicine->id;
                $c->categoryId = $category->id;
                $c->save();
            } else {
                return ['status' => 'error', 'details' => 'There is no category that has this id'];
            }


            return ['status' => 'ok'];
        } else {
            return ['status' => 'error', 'details' => $newMedicine->getErrors()];
        }
    }

    public function actionUpdate()
    {
        $data = (array)(Yii::$app->request->post());
        if (!isset($data['id']))
            return ['status' => 'error', 'details' => 'There is no medicine that has this id'];

        $medicine = Medicine::findOne(['id' => (int)$data['id']]);
        if ($medicine === null)
            return ['status' => 'error', 'details' => "There is no medicine that has this id"];

        $medicine->load($data, '');
        $medicineImages = UploadedFile::getInstancesByName('medicineImages');
        if (!empty($medicineImages)) {
            HelperFunction::createFolderIfNotExist('@app/web/medicines/images');
            HelperFunction::deletePhotos($medicine->imgs, 'medicines');
            $imagesName = [];
            foreach ($medicineImages as $img) {
                $name = Yii::$app->security->generateRandomString(5) . '.' . $img->extension;
                $img->saveAs(Url::to('@app/web/medicines/images') . '/' . $name);
                $imagesName[] = $name;
            }
            $medicine->imgs = implode(',', $imagesName);
        }
        if ($medicine->validate()) {
            $medicine->save();

            $pharmaceuticalForm = PharmaceuticalForm::findOne(['id' => (int)$data['pharmaceuticalFormId']]);
            if ($pharmaceuticalForm !== null) {
                $pm = new MedicinePharmaceuticalForm();
                $pm->medicineId = $medicine->id;
                $pm->pharmaceuticalFormId = $pharmaceuticalForm->id;
                $pm->save();
            } else {
                return ['status' => 'error', 'details' => 'There is no pharmaceutical form that has this id'];
            }

            $category = Category::findOne(['id' => $data['categoryId']]);
            if ($category !== null) {
                $c = new MedicineCategory();
                $c->medicineId = $medicine->id;
                $c->categoryId = $category->id;
                $c->save();
            } else {
                return ['status' => 'error', 'details' => 'There is no category that has this id'];
            }
            return ['status' => 'ok'];
        } else {
            return ['status' => 'error', 'details' => $medicine->getErrors()];
        }
    }

    public function actionGet($id = null, $barcode = null)
    {
        if ($id != null) {
            $medicine = Medicine::find()
                ->where(['id' => (int)$id])
                ->asArray()
                ->one();
        } elseif ($barcode != null) {
            $medicine = Medicine::find()
                ->where(['barcode' => (int)$id])
                ->asArray()
                ->one();
        } else {
            return ['status' => 'error', 'details' => 'You should send either id or barcode params'];
        }
        if ($medicine === null)
            return ['status' => 'error', 'details' => "There is no medicine that has this id ($id) or this barcode ($barcode)"];


        $imgs = explode(',', $medicine['imgs']);
        $images = [];
        if (!empty($imgs)) {
            foreach ($imgs as $i) {
                $images[] = Url::to('@web/medicines/images/' . $i, true);
            }
        }
        $medicine['imgs'] = $images;
        $relatedMedicine = Medicine::find()
            ->where(['categoryId' => $medicine['categoryId']])
            ->andWhere(['NOT' => ['id' => [(int)$medicine['id']]]])
            ->orderBy(new Expression('rand()'))
            ->limit(4);

        return ['status' => 'ok', 'medicine' => $medicine, 'relatedMedicine' => $relatedMedicine];
    }

    public function actionGetAll($searchText = null)
    {
        if ($searchText != null) {
            $medicines = Medicine::find()
                ->where(['like', 'productName', trim($searchText) . '%', false])
                ->asArray()->all();
        } else {
            $medicines = Medicine::find()
                ->asArray()->all();
        }
        if ($medicines) {
            $medicines = array_map(function ($m) {
                $imgs = explode(',', $m['imgs']);
                $images = [];
                if (!empty($imgs)) {
                    foreach ($imgs as $i) {
                        $images[] = Url::to('@web/medicines/images/' . $i, true);
                    }
                }
                $m['imgs'] = $images;
                return $m;
            }, $medicines);
            return ['status' => 'ok', 'medicines' => $medicines];
        } else {
            return ['status' => 'error', 'details' => 'There is no medicine yet'];
        }
    }
}
