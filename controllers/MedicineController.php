<?php

namespace app\controllers;

use Yii;
use yii\helpers\Url;
use yii\filters\Cors;
use yii\web\Response;
use yii\db\Expression;
use app\models\Category;
use app\models\Medicine;
use yii\web\UploadedFile;
use app\models\OfferDetails;
use app\helpers\HelperFunction;
use app\models\MedicineCategory;
use sizeg\jwt\JwtHttpBearerAuth;
use app\models\PharmaceuticalForm;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use PhpOffice\PhpSpreadsheet\IOFactory;
use Picqer\Barcode\BarcodeGeneratorPNG;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use app\models\MedicinePharmaceuticalForm;
use PhpOffice\PhpSpreadsheet\Style\Alignment;

class MedicineController extends \yii\web\Controller
{
    public $enableCsrfValidation = false;

    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['corsFilter'] = [
            'class' => Cors::class,
            'cors' => [
                'Origin' => Yii::$app->params['allowedDomains'],
                'Access-Control-Request-Method' => ['*'],
                'Access-Control-Allow-Methods' => ['POST', 'PUT', 'OPTIONS', 'GET'],
                'Access-Control-Allow-Headers' => ['*'],
                'Access-Control-Request-Headers' => ['*'],
                'Access-Control-Allow-Credentials' => true,
            ]
        ];

        $behaviors['authenticator'] = [
            'class' => CompositeAuth::class,
            'authMethods' => [
                HttpBearerAuth::class,
                QueryParamAuth::class,
                JwtHttpBearerAuth::class
            ]
        ];
        return $behaviors;
    }

    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'api-docs' => [
                'class' => 'genxoft\swagger\ViewAction',
                'apiJsonUrl' => \yii\helpers\Url::to(['/site/api-json'], true),
            ],
            'api-json' => [
                'class' => 'genxoft\swagger\JsonAction',
                'dirs' => [
                    Yii::getAlias('@app/controllers'),
                    Yii::getAlias('@app/models'),
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return parent::beforeAction($action);
    }

    public function actionIndex()
    {
        return ['status' => 'ok', 'status' => 'working'];
    }
    public function actionGenerateExcelFileTemplate()
    {
        try {
            $headStyle = [
                'font' => [
                    'color' => [
                        'rgb' => 'ffffff'
                    ],
                ],
                'fill' => [
                    'fillType' => Fill::FILL_SOLID,
                    'startColor' => ['rgb' => '538ED5']
                ]
            ];
            $spreadsheet = new Spreadsheet();
            $spreadsheet->getDefaultStyle()->getFont()->setName('Berlin Sans FB')->setSize(16);

            $sheet = $spreadsheet->getActiveSheet();

            $sheet->setCellValue('A1', 'Product Name');
            $sheet->setCellValue('B1', 'Indications');
            $sheet->setCellValue('C1', 'Packing');
            $sheet->setCellValue('D1', 'Composition');
            $sheet->setCellValue('E1', 'Expired Date');
            $sheet->setCellValue('F1', 'Price');
            $sheet->setCellValue('G1', 'Net Price');
            $sheet->setCellValue('H1', 'Category');
            $sheet->setCellValue('I1', 'Pharmaceutical Form');
            $sheet->getStyle('A1:I1')->applyFromArray($headStyle);

            $sheet
                ->getStyle('A1:I1')
                ->getAlignment()
                ->setHorizontal(Alignment::HORIZONTAL_CENTER);

            $sheet->getColumnDimension('A')->setWidth(12);
            $sheet->getColumnDimension('B')->setWidth(10);
            $sheet->getColumnDimension('C')->setWidth(10);
            $sheet->getColumnDimension('D')->setWidth(10);
            $sheet->getColumnDimension('E')->setWidth(14);
            $sheet->getColumnDimension('F')->setWidth(8);
            $sheet->getColumnDimension('G')->setWidth(8);
            $sheet->getColumnDimension('H')->setWidth(10);
            $sheet->getColumnDimension('I')->setWidth(16);


            $fileName = yii::$app->getSecurity()->generateRandomString(10);
            $writer = new Xlsx($spreadsheet);
            HelperFunction::createFolderIfNotExist(Url::to('@app/web/excelFiles/medicines'));


            $writer->save("excelFiles/medicines" . $fileName . ".xlsx");
            $this->response->sendFile("../web/excelFiles/medicines" . $fileName . ".xlsx", "$fileName.xlsx");
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }
    public function actionImportExcelFile()
    {
        try {
            $ids = [];
            if (isset($_FILES['sheet'])) {
                $file = $_FILES['sheet'];
                $tmpName = yii::$app->security->generateRandomString();
                $inputFile = 'excelFiles/' . $tmpName . '.xlsx';
                move_uploaded_file($file['tmp_name'], $inputFile);
                $spreadSheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFile);
                $medicineArray = $spreadSheet->getActiveSheet()->toArray();
                //To remove the first row in file
                $tmpExcelFields = array_splice($medicineArray, 0, 1);
                //This condition to check the template
                if (
                    $tmpExcelFields[0][0] != 'Product Name' ||
                    $tmpExcelFields[0][1] != 'Indications' ||
                    $tmpExcelFields[0][2] != 'Packing' ||
                    $tmpExcelFields[0][3] != 'Composition' ||
                    $tmpExcelFields[0][4] != 'Expired Date' ||
                    $tmpExcelFields[0][5] != 'Price' ||
                    $tmpExcelFields[0][6] != 'Net Price' ||
                    $tmpExcelFields[0][7] != 'Category' ||
                    $tmpExcelFields[0][8] != 'Pharmaceutical Form'
                ) {
                    return ['status' => 'error', 'details' => 'This excel file is not a validate file'];
                }
                $i = 0;
                $errorArr = [];
                foreach ($medicineArray as $m) {
                    if (
                        empty($m[0]) ||
                        empty($m[1]) ||
                        empty($m[2]) ||
                        empty($m[3]) ||
                        empty($m[4]) ||
                        empty($m[5]) ||
                        empty($m[6]) ||
                        empty($m[7]) ||
                        empty($m[8])
                    ) {
                        array_push($errorArr, ['error' => "There are missing data in this row ($i)"]);
                    }
                    $i++;
                    $isExsist = Medicine::findOne(['productName' => trim($m[0])]);
                    if ($isExsist !== null) {
                        array_push($errorArr, ['error' => "<b>$m[0]</b> Medicine already exist"]);
                        continue;
                    }
                    $newMedicine = new Medicine();
                    if (trim($m[1]) === '') {
                        array_push($errorArr, ['error' => "<b>$m[0]</b> Medicine name should not be empty"]);
                        continue;
                    }
                    $category = Category::findOne(['name' => trim($m[7])]);
                    $pharmaceuticalForm = PharmaceuticalForm::findOne(['name' => trim($m[8])]);

                    if ($category === null) {
                        $category = new Category();
                        if (trim($m[7]) === '') {
                            array_push($errorArr, ['error' => "<b>$m[0]</b> does not have a category"]);
                            continue;
                        }
                        $category->name =  trim($m[7]);
                        $category->save();
                    }

                    if ($pharmaceuticalForm === null) {
                        if (trim($m[8]) === '') {
                            array_push($errorArr, ['error' => "<b>$m[0]</b> does not have a pharmaceutical Form"]);
                            continue;
                        }
                        $pharmaceuticalForm = new PharmaceuticalForm();
                        $pharmaceuticalForm->name =  trim($m[8]);
                        $pharmaceuticalForm->save();
                    }

                    $newMedicine->productName = trim($m[0]);
                    $newMedicine->indications = trim($m[1]);
                    $newMedicine->packing = trim($m[2]);
                    $newMedicine->composition = trim($m[3]);
                    $newMedicine->expiredDate = trim($m[4]);
                    $newMedicine->price = (float)$m[5];
                    $newMedicine->netPrice = (float) $m[6];
                    if ($newMedicine->validate()) {
                        $newMedicine->save();
                        $ids[] = $newMedicine->id;

                        $pm = new MedicinePharmaceuticalForm();
                        $pm->medicineId = $newMedicine->id;
                        $pm->pharmaceuticalFormId = $pharmaceuticalForm->id;

                        $pm->save();

                        $c = new MedicineCategory();
                        $c->medicineId = $newMedicine->id;
                        $c->categoryId = $category->id;
                        $c->save();
                    } else {
                        array_push($errorArr, ['error' => "<b>$m[0]</b> ", 'details' => $newMedicine->getErrors()]);
                    }
                    // Generate barcode
                    $newMedicine = Medicine::findOne(['id' => $newMedicine->id]);
                    HelperFunction::createFolderIfNotExist(Url::to('@app/web/medicines/barcodes'));
                    $generator = new BarcodeGeneratorPNG();
                    $generateName = Yii::$app->security->generateRandomString(5) . '.png';
                    file_put_contents(Url::to('@app/web/medicines/barcodes') . '/' . $generateName, $generator->getBarcode($newMedicine->id, $generator::TYPE_CODE_128));
                    $newMedicine->barcode = $generateName;
                    $newMedicine->save();
                }
                $newAddedMedicine = Medicine::find()->where(['in', 'id', $ids])->all();
                return ['status' => 'ok', 'newAddedMedicines' => $newAddedMedicine, 'errorDetails' => $errorArr];
            } else {
                return ['status' => 'error', 'details' => 'There is no file uploaded'];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    // public function actionReadMedicines()
    // {
    //     $spreadSheet = IOFactory::load(Url::to('@app/web/aphamea.xlsx'));
    //     $spreadSheetArray = $spreadSheet->getActiveSheet()->toArray();
    //     array_splice($spreadSheetArray, 0, 1);
    //     foreach ($spreadSheetArray as $m) {
    //         $newMedicine = new Medicine();
    //         $newMedicine->productName = $m[1];
    //         $newMedicine->indications = $m[5];
    //         $newMedicine->packing = $m[6];
    //         $newMedicine->composition = $m[4];
    //         if ($newMedicine->validate()) {
    //             $newMedicine->save();

    //             $pharmaceuticalForm = PharmaceuticalForm::findOne(['name' => $m[2]]);
    //             if ($pharmaceuticalForm === null) continue;

    //             $pm = new MedicinePharmaceuticalForm();
    //             $pm->medicineId = $newMedicine->id;
    //             $pm->pharmaceuticalFormId = $pharmaceuticalForm->id;
    //             $pm->save();


    //             $category = Category::findOne(['name' => $m[3]]);
    //             if ($category === null) continue;
    //             $cm = new MedicineCategory();
    //             $cm->medicineId = $newMedicine->id;
    //             $cm->categoryId = $pharmaceuticalForm->id;
    //             $cm->save();
    //         }
    //     }
    // }

    public function actionAdd()
    {
        $data = (array)(Yii::$app->request->post());
        if (
            !isset($data['productName']) ||
            !isset($data['indications']) ||
            !isset($data['packing']) ||
            !isset($data['composition']) ||
            !isset($data['price']) ||
            !isset($data['netPrice']) ||
            !isset($data['pharmaceuticalFormId']) ||
            !isset($data['categoryId'])
        ) {
            return ['status' => 'error', 'details' => 'There are missing params'];
        }
        try {
            $pharmaceuticalForm = PharmaceuticalForm::findOne(['id' => (int)$data['pharmaceuticalFormId']]);
            $category = Category::findOne(['id' => $data['categoryId']]);
            if ($pharmaceuticalForm === null) {

                return ['status' => 'error', 'details' => 'Pharmaceutical Form Id is not valid'];
            }
            if ($category === null) {
                return ['status' => 'error', 'details' => 'Category Id is not valid'];
            }

            $newMedicine = new Medicine();
            $newMedicine->load($data, '');
            $medicineImages = UploadedFile::getInstancesByName('medicineImages');
            if (!empty($medicineImages)) {
                HelperFunction::createFolderIfNotExist('@app/web/medicines/images');
                $imagesName = [];
                foreach ($medicineImages as $img) {
                    $name = Yii::$app->security->generateRandomString(5) . '.' . $img->extension;
                    $img->saveAs(Url::to('@app/web/medicines/images') . '/' . $name);
                    $imagesName[] = $name;
                }
                $newMedicine->imgs = implode(',', $imagesName);
            }
            if ($newMedicine->validate()) {
                $newMedicine->save();

                $pm = new MedicinePharmaceuticalForm();
                $pm->medicineId = $newMedicine->id;
                $pm->pharmaceuticalFormId = $pharmaceuticalForm->id;
                if ($pm->validate()) {
                    $pm->save();
                } else {
                    return ['status' => 'error', 'details' => $pm->getErrors()];
                }
                $c = new MedicineCategory();
                $c->medicineId = $newMedicine->id;
                $c->categoryId = $category->id;
                if ($c->validate()) {
                    $c->save();
                } else {
                    return ['status' => 'error', 'details' => $c->getErrors()];
                }

                // Generate barcode
                $newMedicine = Medicine::findOne(['id' => $newMedicine->id]);
                HelperFunction::createFolderIfNotExist(Url::to('@app/web/medicines/barcodes'));
                $generator = new BarcodeGeneratorPNG();
                $generateName = Yii::$app->security->generateRandomString(5) . '.png';
                file_put_contents(Url::to('@app/web/medicines/barcodes') . '/' . $generateName, $generator->getBarcode($newMedicine->id, $generator::TYPE_CODE_128));
                $newMedicine->barcode = $generateName;
                $newMedicine->save();

                $newMedicine->toArray();
                $imgs = explode(',', $newMedicine['imgs']);
                $images = [];
                if ($imgs !== false) {
                    foreach ($imgs as $i) {
                        if ($i)
                            $images[] = Url::to('@web/medicines/images/' . $i, true);
                    }
                }
                $newMedicine['imgs'] = $images;
                $newMedicine['barcode'] = Url::to('@web/medicines/barcodes/' . $newMedicine['barcode'], true);



                return ['status' => 'ok', 'newMedicine' => $newMedicine];
            } else {
                return ['status' => 'error', 'details' => $newMedicine->getErrors()];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionUpdate()
    {
        $data = (array)(Yii::$app->request->post());
        if (
            !isset($data['productName']) ||
            !isset($data['indications']) ||
            !isset($data['packing']) ||
            !isset($data['composition']) ||
            !isset($data['price']) ||
            !isset($data['netPrice']) ||
            !isset($data['pharmaceuticalFormId']) ||
            !isset($data['categoryId']) ||
            !isset($data['id'])
        ) {
            return ['status' => 'error', 'details' => 'There are missing params'];
        }

        try {
            $pharmaceuticalForm = PharmaceuticalForm::findOne(['id' => (int)$data['pharmaceuticalFormId']]);
            $category = Category::findOne(['id' => $data['categoryId']]);
            if ($pharmaceuticalForm === null) {
                return ['status' => 'error', 'details' => 'Pharmaceutical Form Id is not valid'];
            }
            if ($category === null) {
                return ['status' => 'error', 'details' => 'Category Id is not valid'];
            }

            $medicine = Medicine::findOne(['id' => (int)$data['id']]);
            if ($medicine === null)
                return ['status' => 'error', 'details' => "There is no medicine that has this id"];

            $medicine->load($data, '');
            $medicineImages = UploadedFile::getInstancesByName('medicineImages');
            if (!empty($medicineImages)) {
                HelperFunction::createFolderIfNotExist('@app/web/medicines/images');
                HelperFunction::deletePhotos($medicine->imgs, 'medicines');
                $imagesName = [];
                foreach ($medicineImages as $img) {
                    $name = Yii::$app->security->generateRandomString(5) . '.' . $img->extension;
                    $img->saveAs(Url::to('@app/web/medicines/images') . '/' . $name);
                    $imagesName[] = $name;
                }
                $medicine->imgs = implode(',', $imagesName);
            }
            if ($medicine->validate()) {
                $medicine->save();
                MedicinePharmaceuticalForm::findOne(['medicineId' => $medicine->id])->delete();
                MedicineCategory::findOne(['medicineId' => $medicine->id])->delete();

                $pm = new MedicinePharmaceuticalForm();
                $pm->medicineId = $medicine->id;
                $pm->pharmaceuticalFormId = $pharmaceuticalForm->id;
                if ($pm->validate()) {
                    $pm->save();
                } else {
                    return ['status' => 'error', 'details' => $pm->getErrors()];
                }
                $c = new MedicineCategory();
                $c->medicineId = $medicine->id;
                $c->categoryId = $category->id;
                if ($c->validate()) {
                    $c->save();
                } else {
                    return ['status' => 'error', 'details' => $c->getErrors()];
                }
                // Generate barcode
                $newMedicine = Medicine::findOne(['id' => $medicine->id]);
                HelperFunction::createFolderIfNotExist(Url::to('@app/web/medicines/barcodes'));
                $generator = new BarcodeGeneratorPNG();
                $generateName = Yii::$app->security->generateRandomString(5) . '.png';
                file_put_contents(Url::to('@app/web/medicines/barcodes') . '/' . $generateName, $generator->getBarcode($newMedicine->id, $generator::TYPE_CODE_128));
                $newMedicine->barcode = $generateName;
                $newMedicine->save();

                $newMedicine->toArray();
                $imgs = explode(',', $newMedicine['imgs']);
                $images = [];
                if ($imgs !== false) {
                    foreach ($imgs as $i) {
                        if ($i)
                            $images[] = Url::to('@web/medicines/images/' . $i, true);
                    }
                }
                $newMedicine['imgs'] = $images;
                $newMedicine['barcode'] = Url::to('@web/medicines/barcodes/' . $newMedicine['barcode'], true);

                return ['status' => 'ok', 'medicine' => $newMedicine];
            } else {
                return ['status' => 'error', 'details' => $medicine->getErrors()];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public  function actionDelete()
    {
        try {
            $errors = [];
            $data = (array)json_decode(Yii::$app->request->getRawBody(), true);
            if (!isset($data['ids'])) {
                return ["status" => "error", "details" => "There are missing param"];
            }
            $ids = (array)$data['ids'];
            if (empty($ids))
                return ["status" => "error", "details" => "The array of ids is empty"];

            foreach ($ids as $id) {
                $id = (int)$id;
                $medicine = Medicine::findOne(['id' => $id]);
                if ($medicine === null) {
                    $errors[] = "There is no medicine that has this id " . $id;
                    continue;
                }
                if (OfferDetails::findOne(['medicineId' => $id]) !== null) {
                    $errors[] = "You can not delete this medicine because it belongs to an offer";
                    continue;
                }
                MedicineCategory::deleteAll(['medicineId' => $id]);
                MedicinePharmaceuticalForm::deleteAll(['medicineId' => $id]);

                if (!$medicine->delete()) {
                    $errors[] = $medicine->getErrors();
                }
            }

            return ['status' => 'ok', 'errors' => $errors];
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionGet($id = null)
    {
        try {
            if ($id === null) {
                return ['status' => 'error', 'details' => 'You should send id'];
            }
            $medicine = Medicine::find()
                ->where(['id' => (int)$id])
                ->with('categories', 'pharmaceuticalForms')
                ->asArray()
                ->one();

            if ($medicine === null)
                return ['status' => 'error', 'details' => "There is no medicine that has this id"];


            $imgs = explode(',', $medicine['imgs']);
            $images = [];
            if ($imgs !== false) {
                foreach ($imgs as $i) {
                    if ($i)
                        $images[] = Url::to('@web/medicines/images/' . $i, true);
                }
            }
            $medicine['imgs'] = $images;
            $medicine['barcode'] = Url::to('@web/medicines/barcodes/' . $medicine['barcode'], true);

            return ['status' => 'ok', 'medicine' => $medicine];
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionGetAll()
    {
        try {
            $medicines = Medicine::find();

            $data = (array)json_decode(Yii::$app->request->getRawBody());
            if (!isset($data['searchFilters']))
                return ['status' => 'error', 'details' => 'There are missing params'];

            $searchText = trim($data['searchFilters']->searchText);
            $platform = (int)$data['searchFilters']->platform;
            if (!in_array($platform, Medicine::PLATFORMS))
                return ['status' => 'error', 'details' => 'Platform is not valid'];

            if ($platform === 0) {
                $searchFilters = (array)$data['searchFilters']->filters;
                foreach ($searchFilters as $s) {
                    $s = (array)$s;
                    if (!isset($s['name']) || !isset($s['status']))
                        continue;
                    if (!in_array($s['name'], ['productName', 'indications', 'composition']))
                        continue;

                    if ((bool)$s['status'] === true)
                        $medicines->andFilterWhere(['like', $s['name'],  '%' . trim($searchText) . '%', false]);
                }
                $medicines = $medicines
                    ->with('categories', 'pharmaceuticalForms')
                    ->asArray()
                    ->all();
            } else {
                $medicines = $medicines
                    ->andWhere('MATCH(productName,indications,composition) AGAINST (:searchText)', ['searchText' => $searchText])
                    ->with('categories', 'pharmaceuticalForms')
                    ->asArray()
                    ->all();
            }
            if ($medicines) {
                $medicines = array_map(function ($m) {
                    $imgs = explode(',', $m['imgs']);
                    $images = [];
                    if (!empty($imgs)) {
                        foreach ($imgs as $i) {
                            if ($i)
                                $images[] = Url::to('@web/medicines/images/' . $i, true);
                        }
                    }
                    $m['imgs'] = $images;
                    $m['barcode'] = Url::to('@web/medicines/barcodes/' . $m['barcode'], true);

                    return $m;
                }, $medicines);
                return ['status' => 'ok', 'medicines' => $medicines];
            } else {
                return ['status' => 'error', 'details' => 'There is no medicine yet'];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }
}
