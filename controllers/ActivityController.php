<?php

namespace app\controllers;

use app\helpers\HelperFunction;
use app\models\Activity;
use sizeg\jwt\JwtHttpBearerAuth;
use Yii;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use yii\filters\Cors;
use yii\helpers\Url;
use yii\web\UploadedFile;

class ActivityController extends \yii\web\Controller
{
    public $enableCsrfValidation = false;

    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['corsFilter'] = [
            'class' => Cors::class,
            'cors' => [
                'Origin' => Yii::$app->params['allowedDomains'],
                'Access-Control-Request-Method' => ['*'],
                'Access-Control-Allow-Methods' => ['POST', 'PUT', 'OPTIONS', 'GET'],
                'Access-Control-Allow-Headers' => ['*'],
                'Access-Control-Request-Headers' => ['*'],
                'Access-Control-Allow-Credentials' => true,
            ]
        ];
        $behaviors['authenticator'] = [
            'class' => CompositeAuth::class,
            'authMethods' => [
                HttpBearerAuth::class,
                QueryParamAuth::class,
                JwtHttpBearerAuth::class
            ]
        ];
        return $behaviors;
    }

    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'api-docs' => [
                'class' => 'genxoft\swagger\ViewAction',
                'apiJsonUrl' => \yii\helpers\Url::to(['/site/api-json'], true),
            ],
            'api-json' => [
                'class' => 'genxoft\swagger\JsonAction',
                'dirs' => [
                    Yii::getAlias('@app/controllers'),
                    Yii::getAlias('@app/models'),
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return parent::beforeAction($action);
    }

    public function actionIndex()
    {
        return ['status' => 'ok', 'status' => 'working'];
    }


    public function actionAdd()
    {
        try {
            $data = (array)(Yii::$app->request->post());
            if (!isset($data['type']) || !isset($data['content']))
                return ["status" => "error", "details" => "There are missing params"];

            if (!in_array($data['type'], Activity::ACTIVITY_TYPE)) {
                return ['status' => 'error', 'details' => 'The type of activity is not valid'];
            }

            $newActivity = new Activity();
            $newActivity->type = $data['type'];
            $newActivity->content = $data['content'];
            $activityImages = UploadedFile::getInstancesByName('activityImages');
            $imagesName = [];
            if (!empty($activityImages)) {
                HelperFunction::createFolderIfNotExist('@app/web/activities/images');

                foreach ($activityImages as $img) {
                    $name = Yii::$app->security->generateRandomString(5) . '.' . $img->extension;
                    $img->saveAs(Url::to('@app/web/activities/images') . '/' . $name);
                    $imagesName[] = $name;
                }
            }
            $newActivity->imgs = implode(',', $imagesName);
            if ($newActivity->validate()) {
                $newActivity->save();
                return ['status' => 'ok'];
            } else {
                return ['status' => 'error', 'details' => $newActivity->getErrors()];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionDelete()
    {
        try {
            $data = (array)json_decode(Yii::$app->request->getRawBody(), true);
            if (!isset($data['id'])) {
                return ["status" => "error", "details" => "There are missing params (id)"];
            }
            $activity = Activity::findOne(['id' => (int)$data['id']]);
            if ($activity === null)
                return ["status" => "error", "details" => "There is no activity that has this id "];

            if (!$activity->delete()) {
                return ["status" => "error", "details" => $activity->getErrors()];
            }
            return ['status' => 'ok'];
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionGetAll($type)
    {
        try {
            if (!in_array((int)$type, Activity::ACTIVITY_TYPE))
                return ['status' => 'error', 'details' => 'The type of activity is not valid'];

            $activities = Activity::find()->where(['type' => (int)$type])->all();
            if ($activities) {
                $activities = array_map(function ($a) {
                    $imgs = explode(',', $a['imgs']);
                    $images = [];
                    if (!empty($imgs)) {
                        foreach ($imgs as $i) {
                            $images[] = Url::to('@web/activities/images/' . $i, true);
                        }
                    }
                    $a['imgs'] = $images;
                    return $a;
                }, $activities);
                return ['status' => 'ok', 'activities' => $activities];
            } else {
                return ["status" => "error", "details" => 'There is no activity'];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionGet($id)
    {
        try {
            $activity = Activity::find()->where(['id' => (int)$id])->asArray()->one();
            if ($activity === null)
                return ["status" => "error", "details" => 'There is no activity that has this id '.$id];

            $imgs = explode(',', $activity['imgs']);
            $images = [];
            if ($imgs) {
                foreach ($imgs as $i) {
                    $images[] = Url::to('@web/activities/images/' . $i, true);
                }
            }
            $activity['imgs'] = $images;
            return [
                'status' => 'ok',
                'activity' => $activity
            ];
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionUpdate()
    {
        try {
            $data = (array)(Yii::$app->request->post());
            if (!isset($data['id']) || !isset($data['type']) || !isset($data['content']))
                return ["status" => "error", "details" => "There are missing params"];

            if (!in_array($data['type'], Activity::ACTIVITY_TYPE)) {
                return ['status' => 'error', 'details' => 'The type of activity is incorrect'];
            }

            $activity = Activity::findOne(['id' => (int)$data['id']]);
            if ($activity === null)
                return ["status" => "error", "details" => "There is no activity"];

            $activity->type = $data['type'];
            $activity->content = $data['content'];
            $activityImages = UploadedFile::getInstancesByName('activityImages');
            $imagesName = [];
            if (!empty($activityImages)) {
                HelperFunction::createFolderIfNotExist('@app/web/activities/images');
                HelperFunction::deletePhotos($activity->imgs, 'activities');

                foreach ($activityImages as $img) {
                    if (!file_exists($img->name)) {
                        $name = Yii::$app->security->generateRandomString(5) . '.' . $img->extension;
                        $img->saveAs(Url::to('@app/web/activities/images') . '/' . $name);
                        $imagesName[] = $name;
                    } else {
                        $imagesName[] = $img->name;
                    }
                }
            }
            $activity->imgs = implode(',', $imagesName);
            if ($activity->validate()) {
                $activity->save();
                return ['status' => 'ok'];
            } else {
                return ['status' => 'error', 'details' => $activity->getErrors()];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }
}
