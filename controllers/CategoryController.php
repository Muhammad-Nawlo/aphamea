<?php

namespace app\controllers;

use Yii;
use yii\db\Query;
use yii\helpers\Url;
use yii\filters\Cors;
use yii\web\Response;
use app\models\Category;
use app\models\Medicine;
use app\helpers\HelperFunction;
use app\models\MedicineCategory;
use sizeg\jwt\JwtHttpBearerAuth;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

class CategoryController extends \yii\web\Controller
{
    public $enableCsrfValidation = false;

    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'api-docs' => [
                'class' => 'genxoft\swagger\ViewAction',
                'apiJsonUrl' => \yii\helpers\Url::to(['/site/api-json'], true),
            ],
            'api-json' => [
                'class' => 'genxoft\swagger\JsonAction',
                'dirs' => [
                    Yii::getAlias('@app/controllers'),
                    Yii::getAlias('@app/models'),
                ],
            ],
        ];
    }

    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['corsFilter'] = [
            'class' => Cors::class,
            'cors' => [
                'Origin' => Yii::$app->params['allowedDomains'],
                'Access-Control-Request-Method' => ['*'],
                'Access-Control-Allow-Methods' => ['POST', 'PUT', 'OPTIONS', 'GET'],
                'Access-Control-Allow-Headers' => ['*'],
                'Access-Control-Request-Headers' => ['*'],
                'Access-Control-Allow-Credentials' => true,
            ]
        ];
        // $behaviors['authenticator'] = [
        //     'class' => CompositeAuth::class,
        //     'authMethods' => [
        //         HttpBearerAuth::class,
        //         QueryParamAuth::class,
        //         JwtHttpBearerAuth::class
        //     ]
        // ];
        return $behaviors;
    }

    public function beforeAction($action)
    {
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return parent::beforeAction($action);
    }

    public function actionIndex()
    {
        return ['status' => 'ok', 'status' => 'It\'s working'];
    }

    public function actionGenerateExcelFileTemplate()
    {
        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->setCellValue('A1', 'Name');

        $fileName = yii::$app->getSecurity()->generateRandomString(10);
        $writer = new Xlsx($spreadsheet);
        HelperFunction::createFolderIfNotExist(Url::to('@app/web/excelFiles/categories'));


        $writer->save("excelFiles/categories" . $fileName . ".xlsx");
        $this->response->sendFile(Url::to("@app/web/excelFiles/categories" . $fileName . ".xlsx"), "$fileName.xlsx");
    }

    public function actionImportExcelFile()
    {
        try {
            if (isset($_FILES['sheet'])) {
                $file = $_FILES['sheet'];
                $tmpName = yii::$app->security->generateRandomString();
                $inputFile = 'excelFiles/categories' . $tmpName . '.xlsx';
                move_uploaded_file($file['tmp_name'], $inputFile);
                $spreadSheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFile);
                $categoryArray = $spreadSheet->getActiveSheet()->toArray();
                //To remove the first row in file
                $tmpExcelFields = array_splice($categoryArray, 0, 1);
                //This condition to check the template
                if (
                    $tmpExcelFields[0][0] != 'Name'
                ) {
                    return ['status' => 'error', 'details' => 'This excel file is not a validate file'];
                }
                $i = 0;
                $errorArr = [];
                foreach ($categoryArray as $category) {
                    $i++;
                    $isExist = Category::findOne(['name' => trim($category[0])]);
                    if ($isExist === null) {
                        $newCategory = new Category();
                        if (trim($category[0]) === '') {
                            array_push($errorArr, ['error' => "<b>$category[0]</b> Category should not be empty"]);
                            continue;
                        }
                        $newCategory->name = trim($category[0]);
                        if ($newCategory->validate()) {
                            $newCategory->save();
                        } else {
                            array_push($errorArr, ['error' => "<b>$category[0]</b> ", 'details' => $newCategory->getErrors()]);
                        }
                    } else {
                        array_push($errorArr, ['error' => "<b>$category[0]</b> Category already exist"]);
                    }
                }
                return ['status' => 'ok', 'errorDetails' => $errorArr];
            } else {
                return ['status' => 'error', 'details' => 'There is no file uploaded'];
            }
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionAdd()
    {
        try {
            $errors = [
                'notExist' => [],
                'categoryErrors' => [],
                'used' => [],
            ];


            $data = json_decode(Yii::$app->request->getRawBody(), true);
            if (!isset($data['categories'])) {
                return ["status" => "error", "details" => "There are missing params (categories)"];
            }

            if (!isset($data['deletedCategories'])) {
                return ["status" => "error", "details" => "There are missing params (deletedCategories)"];
            }

            if (!empty($data['deletedCategories'])) {
                foreach ($data['deletedCategories'] as $id) {
                    $category = Category::findOne(['id' => (int)$id]);
                    if ($category !== null && MedicineCategory::findOne(['categoryId' => (int)$id]) === null) {
                        MedicineCategory::deleteAll(['categoryId' => (int)$id]);

                        $category->delete();
                    } else {
                        if ($category) {
                            $errors['used'][] = ["Category that has this name $category->name is used"];
                        } else {
                            $errors['notExist'][] = ["Category that has this id $id is not exist"];
                        }
                    }
                }
            }

            foreach ($data['categories'] as $category) {
                $category = (array)$category;
                if ($category['id'] === '') {
                    $newCategory = new Category();
                } else {
                    $newCategory = Category::findOne(['id' => (int)$category['id']]);
                    if ($newCategory === null) {
                        $errors['notExist'][] = ["Category that has this id " . $category['id'] . " is not exist"];
                        continue;
                    }
                }
                $newCategory->name = trim($category['name']);
                if ($newCategory->validate()) {
                    $newCategory->save();
                } else {
                    $errors['categoryErrors'][] = $newCategory->getErrors();
                }
            }
            return ['status' => 'ok', 'errors' => $errors];
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public function actionGetAll()
    {
        try {
            $categories = Category::find()->where([])->with('medicines')->asArray()->all();
            if (!$categories)
                return ['status' => 'error', 'details' => 'There is no category that has this id'];

            $categories = array_map(function ($c) {
                $c['medicines'] = array_map(function ($m) {
                    $imgs = explode(',', $m['imgs']);
                    $images = [];
                    if ($imgs !== false) {
                        foreach ($imgs as $i) {
                            if ($i)
                                $images[] = Url::to('@web/medicines/images/' . $i, true);
                        }
                    }
                    $m['imgs'] = $images;
                    $m['barcode'] = Url::to('@web/medicines/barcodes/' . $m['barcode'], true);

                    return $m;
                }, $c['medicines']);
                return $c;
            }, $categories);

            return ['status' => 'ok', 'categories' => $categories];
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    function actionGet($id)
    {
        $category = Category::find()->where(['id' => (int)$id])->with('medicines')->asArray()->one();
        if ($category === null)
            return ["status" => "error", "details" => 'There is no category that has this id'];

        $category['medicines'] = array_map(function ($m) {
            $imgs = explode(',', $m['imgs']);
            $images = [];
            if ($imgs !== false) {
                foreach ($imgs as $i) {
                    if ($i)
                        $images[] = Url::to('@web/medicines/images/' . $i, true);
                }
            }
            $m['imgs'] = $images;
            $m['barcode']= Url::to('@web/medicines/barcodes/' . $m['barcode'], true);

            return $m;
        }, $category['medicines']);

        return ['status' => 'ok', 'category' => $category];
    }

    function actionGetMedicines($categoryId)
    {
        try {
            $category = Category::find()->where(['id' => (int)$categoryId])->with('medicines')->asArray()->one();
            if ($category === null)
                return ["status" => "error", "details" => 'There is category that has this id'];


            if (empty($category['medicines']))
                return ["status" => "error", "details" => 'There is no medicine that has this category id'];


            $category['medicines'] = array_map(function ($m) {
                $imgs = explode(',', $m['imgs']);
                $images = [];
                if ($imgs !== false) {
                    foreach ($imgs as $i) {
                        if ($i)
                            $images[] = Url::to('@web/medicines/images/' . $i, true);
                    }
                }
                $m['imgs'] = $images;
                $m['barcode'] = Url::to('@web/medicines/barcodes/' . $m['barcode'], true);
                return $m;
            }, $category['medicines']);


            return ['status' => 'ok', 'medicines' => $category['medicines']];
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }

    public  function actionDelete()
    {
        try {
            $data = (array)json_decode(Yii::$app->request->getRawBody(), true);
            if (!isset($data['id']))
                return ["status" => "error", "details" => "There are missing param"];

            $category = Category::findOne(['id' => (int)$data['id']]);
            if ($category === null)
                return ["status" => "error", "details" => "There is no category that has this id "];

            if (MedicineCategory::findOne(['categoryId' => (int)$data['id']]) !== null)
                return ["status" => "error", "details" => "This category has medicines belongs to it"];

            if (!$category->delete())
                return ["status" => "error", "details" => $category->getErrors()];

            return ['status' => 'ok'];
        } catch (\Exception $e) {
            return ['status' => 'error', 'details' => $e->getMessage()];
        }
    }
}
